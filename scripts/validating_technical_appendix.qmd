---
title: "ERAP Index Updates - Technical Appendix"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
execute:
  echo: false
  eval: true
  include: true
  message: false
  warning: false
date-format: short
date: last-modified
date-format: short
---

```{r libraries, eval = T}
library(tidycensus)
library(skimr)
library(sf)
library(readxl)
library(testit)
library(tigris)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(ggridges)
library(here)
library(skimr)
library(tmap)
library(plotly)
library(car)
library(vip)
library(ranger)
library(sm)
library(tidyverse)
library(tidymodels)
library(urbnthemes)
library(gWQS)
library(DescTools)
library(ggrepel)

set_urbn_defaults()
tmap::tmap_mode("view")
options(
  scipen = 999999,
  tigris_use_cache = FALSE)
sf_use_s2(F)
```

```{r generating index}
## `final_indicator/outcome_index` are the objects created from running the file scripts/001_generate_full_index.qmd
indicator_index_df = final_indicator_index %>% st_drop_geometry 
indicator_index_sf = final_indicator_index
outcome_index_df = final_outcome_index %>% st_drop_geometry 
outcome_index_sf = final_outcome_index

indicator_index_df %>% colnames
```

# Figures

### Histogram - Eviction Filing Rates
```{r}
prepped_evictions = indicator_index_df %>%
  select(`Evictions per 1000 (2018)`) %>%
  pivot_longer(cols = everything(), names_to = "evictions")

max_value_of_evictions = prepped_evictions %>%
  group_by(evictions) %>%
  summarize(
    max_val = max(value, na.rm = TRUE) %>% round(digits = 0),
    min_val = min(value, na.rm = TRUE) %>% round(digits = 0))

eviction_histogram_winsorized = prepped_evictions %>%
  filter(evictions == "Evictions per 1000 (2018)") %>%
  ggplot(aes(x = value)) +
    geom_histogram(color = "white", bins = 100) +
    # Add min and max numbers as text
    # geom_text(
    #   data = max_value_of_evictions %>% filter(evictions == "Evictions per 1000 (2018) - Winsorized"),
    #   aes(x = max_val, y = 200, label = max_val %>% scales::number(accuracy = 0.1)),
    #   colour = palette_urbn_magenta[4], fontface = "bold", size = 3
    # ) +
    # geom_text(
    #   data = max_value_of_evictions %>% filter(evictions == "Evictions per 1000 (2018) - Winsorized"),
    #   aes(x = min_val, y = 200, label = min_val %>% scales::number(accuracy = 0.1)),
    #   colour = palette_urbn_magenta[4], fontface = "bold", size = 3
    # ) +
    #facet_wrap(~ evictions, ncol = 1) +
    scale_x_continuous(breaks = scales::pretty_breaks(n = 7)) +
    scale_y_continuous(labels = scales::comma_format()) +
    labs(title = "", x = "Eviction Filing Rate per 1,000", y = "Number of Tracts")

eviction_histogram_winsorized

ggsave(plot = eviction_histogram_winsorized, filename = here("output", "histogram_winsorized_evictions.png"), units = "in", width = 6.5, height = 4.5, dpi = 1000)
```

#### Histograms - Indexes
```{r, fig.height = 10, fig.width = 10}
prepped_indices = outcome_index_df %>% 
  select(matches("index")) %>% select(-matches("quantile")) %>%
  pivot_longer(cols = everything(), names_to = "index") %>%
  mutate(
    index = index %>% str_replace_all(c("_" = " ", "quantile|perc" = "")) %>% str_to_title()) %>% 
  filter(!str_detect(index, "Z-Scored"))

max_value_of_index <- prepped_indices %>%
  group_by(index) %>%
  summarize(
    max_val = max(value, na.rm = TRUE) %>% round(digits = 2),
    min_val = min(value, na.rm = TRUE) %>% round(digits = 2))

## RP No code to display this plot. 
index_histograms <- 
  prepped_indices %>%
    ggplot(aes(x = value)) +
      geom_histogram(color = "white", bins = 100) +
      # Add min and max numbers as text
      geom_text(
        data = max_value_of_index,
        aes(x = max_val, y = 200, label = max_val %>% scales::number(accuracy = 0.1)),
        colour = palette_urbn_magenta[4], fontface = "bold", size = 3
      ) +
      geom_text(
        data = max_value_of_index,
        aes(x = min_val, y = 200, label = min_val %>% scales::number(accuracy = 0.1)),
        colour = palette_urbn_magenta[4], fontface = "bold", size = 3
      ) +
      facet_wrap(~index, ncol = 2) +
      scale_x_continuous(breaks = scales::pretty_breaks(n = 7)) +
      scale_y_continuous(labels = scales::comma_format()) +
      labs(title = "Index Distributions among all US Census Tracts", x = "Index value", y = "")

index_histograms
```
#### Histogram - Total Index Scores, Top Quartile by Race Group 
```{r, fig.height = 4.5, fig.width = 6.5}
# prepped_quartiles = working_df %>%
#   mutate(`% Other` = `% Indigenous` + `% Pacific Islander` + `% Multiracial`) %>%
#   select(quantile_total_index, `% Black`, `% Asian`, `% Hispanic`, `% Other`) %>%
#   mutate(across(-quantile_total_index, ~ ntile(.x, n = 4)))
# 
 threshold = 89
# 
# prepped_quartiles %>% select(`% Black`) #%>% mutate(quartile = ntile(`% Black`, n = 4, res.labels = T))
# prepped_quartiles %>% pull(`% Black`) %>% ntile(n = 4, res.labels = T)


perc_white_df <- unweighted_indicators %>% 
  mutate(`% White` = perc_race_white_nonhispanic) %>% 
  select(geoid, `% White`) %>% 
  mutate(across(matches("% White"), ~ .x %>% scale %>% ntile(n = 100), .names = "{.col} (Z-scored Percentile)")) %>% 
  select(-`% White`)

race_df <- left_join(outcome_index_df, perc_white_df, by = "geoid")

binwidth = 10
linewidth = 2

race_decile_distributions = ggplot() +
  geom_freqpoly(data = race_df %>% filter(`% Black (Z-scored Percentile)` > threshold), aes(`Total Index (Z-scored Percentile)`, color = "Black"), linewidth = 2, binwidth = binwidth) +
  geom_freqpoly(data = race_df %>% filter(`% Asian (Z-scored Percentile)` > threshold), aes(`Total Index (Z-scored Percentile)`, color = "Asian"),  linewidth = 2, binwidth = binwidth) +
  geom_freqpoly(data = race_df %>% filter(`% Hispanic (Z-scored Percentile)` > threshold), aes(`Total Index (Z-scored Percentile)`, color = "Latine"),linewidth = 2, binwidth = binwidth) +
  geom_freqpoly(data = race_df %>% filter(`% Other (Z-scored Percentile)` > threshold), aes(`Total Index (Z-scored Percentile)`, color = "Indigenous, Pacific Islander, Multiracial"), linewidth = 2, binwidth = binwidth) +
  geom_freqpoly(data = race_df %>% filter(`% White (Z-scored Percentile)` > threshold), aes(`Total Index (Z-scored Percentile)`, color = "White"),  linewidth = 2, binwidth = binwidth) +
  scale_color_manual(values = c(
    "Black" = palette_urbn_main[1] %>% as.character,
    "Asian" = palette_urbn_main[2] %>% as.character,
    "Latine" = palette_urbn_main[3] %>% as.character,
    "Indigenous, Pacific Islander, Multiracial" = palette_urbn_main[4] %>% as.character,
    "White" = palette_urbn_main[5] %>% as.character)) +
  xlim(c(0, 100)) +
  labs(x = "Total Index", y = "Number of Census Tracts")

ggsave(filename = here("output", "race_decile_distributions.png"), plot = race_decile_distributions, width = 6.5, height = 4.5, units = "in", dpi = 1000)
```


### Indicators Correlation Plot
```{r, fig.width = 12, fig.height = 12}
correlation_df_outcomes = outcome_index_df %>%
  select(
    ## Housing
    `Median housing cost` = `Median monthly housing cost`,
    `% Renter-occupied units`, 
     `% Renter multifamily` = `% Renter-occupied units in multi-unit structures`,
     ## Household Characteristics
    `% Hispanic`, 
    `% Black`, 
    `% Asian`,
    `% Other`,
    `Average renter HH size`,
    ## Income
    `% Cost-burdened renters` = `% Cost-burdened renter households`,
    `% Extremely low–income renters`,
    ## Evictions
    `Evictions per 1000 (2018)`,
    matches("Index.*Z-Scored")) 

correlation_df_indicators = indicator_index_df %>%
  select(
    ## Housing
    `Median housing cost` = `Median monthly housing cost`,
    `% Renter-occupied units`, 
     `% Renter multifamily` = `% Renter-occupied units in multi-unit structures`,
     ## Household Characteristics
    `% Hispanic`, 
    `% Black`, 
    `% Asian`,
    `% Other`,
    `Average renter HH size`,
    ## Income
    `% Cost-burdened renters` = `% Cost-burdened renter households`,
    `% Extremely low–income renters`,
    ## Evictions
    `Evictions per 1000 (2018)`,
    matches("Index.*Z-Scored")) 

## outcome data
indicator_correlation_matrix = correlation_df_outcomes %>%
  select(-matches("Index")) %>%
  na.omit %>%
  cor

indicator_correlation_matrix

## just indicators and evictions 
indicators_evictions_corrplot = ggcorrplot(
  indicator_correlation_matrix,
  type = "lower",
  lab = TRUE,
  colors = c(palette_urbn_cyan[5], "white", palette_urbn_red[5]),
  digits = 1,
  lab_size = 3.25) +
    theme_urbn_print(base_size = 10) +
    theme(
      axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.95),
      legend.key.width = unit(1, "cm")) +
    labs(y = "", x = "", title = "")

indicators_evictions_corrplot
#ggsave(plot = indicators_evictions_corrplot, filename = here("output", "indicators_eviction_corrplot.png"), units = "in", dpi = 1000, width = 7.5, height = 9)

## including the total index--outcome data (2018)
ggcorrplot(
  correlation_df_outcomes %>% na.omit %>% cor,
  type = "lower",
  lab = TRUE,
  colors = c(palette_urbn_cyan[5], "white", palette_urbn_red[5]),
  digits = 2,
  lab_size = 3.25) +
    theme_urbn_print(base_size = 10) +
    theme(
      axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.95),
      legend.key.width = unit(1, "cm")) +
    labs(y = "", x = "", title = "Correlations between Index Indicators, Eviction Filing Rates, and the Total Index (2021 Data, 2018 Weights)")

##using the outcomes (2018) index-based data
ggcorrplot(
  correlation_df_outcomes %>%
    select(    
      `Evictions per 1000 (2018)`,
      matches("Index.*Z-Scored")) %>% 
    na.omit %>% 
    cor,
  type = "lower",
  lab = TRUE,
  colors = c(palette_urbn_cyan[5], "white", palette_urbn_red[5]),
  digits = 2,
  lab_size = 3.25) +
theme_urbn_print(base_size = 10) +
theme(
  axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.95),
  legend.key.width = unit(1, "cm")) +
labs(y = "", x = "", title = "Correlations between Index Indicators, Eviction Filing Rates, and the Total Index (2018 Data, 2018 Weights)")

##using the indicator index-based data (2021)
ggcorrplot(
  correlation_df_indicators %>%
    select(    
      `Evictions per 1000 (2018)`,
      matches("Index.*Z-Scored")) %>% 
    na.omit %>% 
    cor,
  type = "lower",
  lab = TRUE,
  colors = c(palette_urbn_cyan[5], "white", palette_urbn_red[5]),
  digits = 2,
  lab_size = 3.25) +
theme_urbn_print(base_size = 10) +
theme(
  axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.95),
  legend.key.width = unit(1, "cm")) +
labs(y = "", x = "", title = "Correlations between Index Indicators, Eviction Filing Rates, and the Total Index (2021 Data, 2018 Weights)")
```


```{r Variable Importance Factors}
vif_scores = lm(
  data = outcome_index_df %>% select(-matches("Index")) %>% select(matches("Z-scored|Eviction")),
  formula = `Evictions per 1000 (2018)` ~ .) %>% 
  car::vif()

tibble(Indicator = names(vif_scores), VIF = vif_scores) %>%
  mutate(VIF = round(VIF, 2))
```


### Sub-index and Total Index Correlation Plot
```{r, fig.width = 10, fig.height = 10}
index_correlation_matrix = correlation_df %>% 
  select(matches("Index")) %>%
  na.omit %>% cor()

ggcorrplot(
  index_correlation_matrix,
  type = "lower",
  lab = TRUE,
  colors = c(palette_urbn_cyan[5], "white", palette_urbn_red[5]),
  digits = 2,
  lab_size = 3.25) +
    theme_urbn_print(base_size = 10) +
    theme(
      axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.95),
      legend.key.width = unit(1, "cm")) +
    labs(y = "", x = "", title = "Correlations between Index Indicators and Eviction Filing Rates")

```

### State-level Index / Eviction Filing Rates Correlations?
```{r, fig.height = 8, fig.width = 6.5}
set_urbn_defaults(style = "print")

# Get tract populations
states <- fips_codes %>% filter(!state %in% c("PR", "UM", "VI", "GU", "AS", "MP")) %>% pull(state) %>% unique()
tract_pops <- map_dfr(
  states, 
  ~ get_acs(geography = 'tract', variables = 'B01003_001', state = .x))

tract_scores_by_state <- 
  left_join(
    outcome_index_df,
    tract_pops,
    by = c('geoid'='GEOID')) %>%
  left_join(
    tibble(state.abb, state.name),
    by = c('state_name' = 'state.name')) %>%
  filter(!is.na(`Evictions per 1000 (2018)`)) %>%
  select(geoid, state_name, state_abb = state.abb, population=estimate, `Evictions per 1000 (2018)`, `Total Index (Z-scored Percentile)`) %>%
  group_by(state_name) %>%
  mutate(state_pop_pct = population / sum(population)) %>%
  ungroup()

# Correlation between index and evictions at state level with tracts weighted by population
set.seed(10)
state_weighted_corrs <- tract_scores_by_state %>% 
  group_by(state_name) %>%
  summarize(
    n = n(),
    corr = wCorr::weightedCorr(x = `Evictions per 1000 (2018)`, y = `Total Index (Z-scored Percentile)`, weights = state_pop_pct, method = "Pearson")) %>%
  mutate(
    corr_strength = case_when(
      corr > 0.6 ~ 'strong',
      corr > 0.4 ~ 'moderate',
      corr > 0 ~ 'weak',
      TRUE ~ 'negative')) %>%
  arrange(desc(corr)) %>%
  cbind(height = runif(nrow(.), min = 0.99, max = 1.01)) %>%
  filter(!is.na(state_name) & n > 2)

overall_corr <- cor(outcome_index_df$`Total Index (Z-scored Percentile)`, outcome_index_df$`Evictions per 1000 (2018)`, use = 'complete.obs')
overall_corr
# Visualizing correlations at state level
index_evic_corr_plot <-
  ggplot(state_weighted_corrs, aes(x = corr, y = height, size = n)) +
    ggrepel::geom_text_repel(aes(label = state_name)) +
    scale_size(range = c(2,7)) +
    geom_vline(xintercept = overall_corr, linetype = 'dashed') +
    labs(x = 'Population-weighted correlation', y='') + 
    theme(axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = 'none') #+
    #annotate('label', x = 0.34, y = 1.009, label = paste0(label = 'Overall correlation = \n', round(overall_corr, 2)))
    
index_evic_corr_plot

state_corr_plot = state_weighted_corrs %>% 
  ggplot() +
  geom_bar(aes(x = reorder(state_name, corr), y = corr), stat = "identity") +
  coord_flip() +
  labs(y = "Population-weighted Correlation", x = "State Name", fill = "") +
  ylim(c(0,1))

state_tract_plot = state_weighted_corrs %>%
  ggplot() +
  geom_bar(aes(x = reorder(state_name, corr), y = n), stat = "identity") +
  coord_flip() +
  labs(y = "Number of Tracts with Evictions Data", x = "") +
  #theme(axis.text.y = element_blank()) +
  ylim(c(0, 5000))

state_corr_tract_grid = grid.arrange(state_corr_plot, state_tract_plot, nrow = 1)

state_weighted_corrs %>%
  summarise(
    median = median(corr),
    mean = mean(corr))

index_evic_corr_plot
ggsave(plot = index_evic_corr_plot, filename = here("output", "index_evic_corr_plot.png"), height = 4.5, width = 6.5, units = "in", dpi = 1000)
ggsave(plot = state_corr_tract_grid, filename = here("output", "state_corr_tract_grid.png"), height = 8, width = 6.5, units = "in", dpi = 1000)
```
### Evictions Coverage Map
```{r, fig.width = 9, fig.height = 9}
urbnthemes::set_urbn_defaults(style = "map")
state_evictions = left_join(
    index_df,
    tract_pops,
    by = c('geoid'='GEOID')) %>%
  left_join(
    tibble(state.abb, state.name),
    by = c('state_name' = 'state.name')) %>%
  group_by(state_name) %>%
  summarize(
    tract_counts = n(),
    eviction_tract_counts = sum(!is.na(`Evictions per 1000 (2018)`)),
    coverage_percent = eviction_tract_counts / tract_counts) %>%
  mutate(coverage_percent = (coverage_percent * 100) %>% round(digits = 0))
  
tract_coverage_map = tigris::states(cb = T, year = 2021) %>%
  tigris::shift_geometry() %>%
  left_join(state_evictions, by = c("NAME" = "state_name")) %>%
  filter(!is.na(coverage_percent)) %>%
  mutate(fontcolor = if_else(coverage_percent < 75, "white", "black")) %>%
  ggplot(aes(fill = coverage_percent)) +
    geom_sf() +
    geom_sf_text(
      aes(label = STUSPS, color = fontcolor), size = 2.5, fontface = "bold", show.legend = F) +
    scale_color_manual(values = c("black", "white")) +
    labs(fill = "Percent of Tracts with Evictions Data" %>% str_wrap(width = 25))

ggsave(filename = here("output", "tract_coverage_map.png"), plot = tract_coverage_map, width = 9, height = 9, units = "in", dpi = 1000)

state_evictions %>% 
  summarize(
    tracts = sum(tract_counts),
    eviction_tracts = sum(eviction_tract_counts),
    perc_coverage_us = eviction_tracts / tracts
  )

state_evictions %>%
  mutate(
    percent_all_tracts = tract_counts / sum(tract_counts),
    percent_eviction_tracts = eviction_tract_counts / sum(eviction_tract_counts),
    across(matches("percent.*tracts"), ~ (.x * 100) %>% round(digits = 0)))
```

### Total Index / Eviction Filing Rates Scatterplot w/ Regression Line
```{r, fig.width = 10, fig.height = 10}
prepped_indices_evictions = index_df %>% 
  select(matches("index.*z|evictions")) %>%
  pivot_longer(cols = matches("index"), names_to = "index") 

## Tracts with missing evictions data are dropped from the plot
prepped_indices_evictions %>%
  ggplot(aes(`Evictions per 1000 (2018)`, value)) +
    geom_point(alpha = .03, color = palette_urbn_main[1]) +
    geom_smooth(color = palette_urbn_main[2]) +
    facet_wrap(~ index) +
    labs(y = "Index Score", title = "Correlations between Index Scores and Eviction Filing Rates")
```

### Index V1 and Index V2 - Tract-level Correlations
```{r, fig.height = 20, fig.width = 20}
## NOTE ERROR: HI and AK are misaligned
## NOTE -- 2020 and 2010-vintage tract geometries are not aligned correctly yet
states_codes <- fips_codes %>% filter(!state %in% c("PR", "UM", "VI", "GU", "AS", "MP")) %>% pull(state_name) %>% unique()
urbnthemes::set_urbn_defaults(style = "map")
df_index_v1 = read_csv(here("data", "final-data", "old_index_outputs", "housing_index_state_adj_2021.csv")) %>%
  select(
    geoid = GEOID,
    quantile_total_index_v1 = total_index_quantile)

tracts_sf = index_sf %>%
  left_join(df_index_v1) %>%
  mutate(total_index_change = `Total Index (Z-scored Percentile)` - quantile_total_index_v1) %>%
  filter(state_name %in% states_codes)
  
tract_centroids = tracts_sf %>% mutate(point = st_centroid(geometry)) 
st_geometry(tract_centroids) = "point"
tract_centroids = tract_centroids %>% st_transform(3726) %>% tigris::shift_geometry()
counties_sf = get_urbn_map("counties", sf = T) %>% st_transform(3726) %>% tigris::shift_geometry()

tract_centroids %>%
  select(total_index_change) %>%
  filter(!is.na(total_index_change)) %>%
  ggplot() +
    geom_sf(data = counties_sf, fill = "grey") +
    geom_sf(aes(color = total_index_change), size = 1.5, alpha = .675) +
    scale_color_gradientn(colors = palette_urbn_diverging) +
    labs(color = "Change in Index Scores (V2 - V1)", title = "Tract-level changes in index scores between the original and updated indices.")
```